import utils.szv_utils
from core.logger import Logger
from core.messenger import Messenger


class LoginController:
    """
    Hlavn√≠ ≈ô√≠d√≠c√≠ t≈ô√≠da aplikace.
    """

    def __init__(self, login_window, window_stack):
        """
        Inicializuje 'LoginController' a nastav√≠ jeho hlavn√≠ atributy.
        :param login_window: Reference na p≈ôihla≈°ovac√≠ okno ('LoginWindow')
        """

        # üìå Ulo≈æen√≠ referenc√≠ na okna aplikace
        self.login_window = login_window  # ‚úÖ Uchov√°me referenci na 'LoginWindow'
        self.window_stack = window_stack  # ‚úÖ uchov√°me stack
        self.messenger = Messenger()  # ‚úÖ Inicializujeme instanci 'Messenger' pro spr√°vu zpr√°v

        # üìå Inicializace t≈ô√≠dy 'SzvDecrypt' pro de≈°ifrov√°n√≠ p≈ôihl√°≈°en√≠
        self.decrypter = utils.szv_utils.SzvDecrypt()  # ‚úÖ Naƒçteme de≈°ifrovac√≠ t≈ô√≠du
        self.value_prefix = None

        self.work_order_controller = None

        # üìå Inicializace logger≈Ø
        self.normal_logger = Logger(spaced=False)  # ‚úÖ Klasick√Ω logger
        self.spaced_logger = Logger(spaced=True)  # ‚úÖ Logger s pr√°zdn√Ωm ≈ô√°dkem

        # üìå Propojen√≠ tlaƒç√≠tka s metodou
        self.login_window.login_button.clicked.connect(self.handle_login)
        self.login_window.exit_button.clicked.connect(self.handle_exit)

    def handle_login(self):
        """
        Ovƒõ≈ô√≠ p≈ôihla≈°ovac√≠ heslo a provede autentizaci u≈æivatele.
        - Z√≠sk√° zadan√© heslo z 'LoginWindow'
        - Ovƒõ≈ô√≠ spr√°vnost hesla pomoc√≠ 'SzvDecrypt'
        - P≈ôi √∫spƒõ≈°n√©m p≈ôihl√°≈°en√≠ otev≈ôe 'WorkOrderWindow'
        - P≈ôi chybƒõ zobraz√≠ varov√°n√≠ u≈æivateli
        """
        password = self.login_window.input_password.text().strip()  # ‚úÖ Z√≠sk√°n√≠ hesla z inputu
        self.login_window.input_password.clear()

        try:
            if self.decrypter.check_login(password):
                self.value_prefix = utils.szv_utils.get_value_prefix()  # ‚úÖ Naƒçten√≠ hodnoty z model.py
                self.open_work_order_window()  # ‚úÖ Po √∫spƒõ≈°n√©m p≈ôihl√°≈°en√≠ otev≈ôeme WorkOrderWindow
            else:
                self.normal_logger.log('Warning', f'Zadan√© heslo "{password}" nen√≠ spr√°vn√©!', 'LOGCON001')
                self.messenger.show_warning('Warning', f'Zadan√© heslo nen√≠ spr√°vn√©!', 'LOGCON001')
                self.login_window.input_password.clear()
                self.login_window.input_password.setFocus()
        except Exception as e:
            self.normal_logger.log('Error', f'Neoƒçek√°van√Ω probl√©m: {str(e)}', 'LOGCON002')
            self.messenger.show_error('Error', f'{str(e)}', 'LOGCON002', False)
            self.login_window.input_password.clear()
            self.login_window.input_password.setFocus()

    def open_work_order_window(self):
        """
        Otev≈ôe 'WorkOrderWindow' pro v√Ωbƒõr produktu.

        - Po √∫spƒõ≈°n√©m p≈ôihl√°≈°en√≠ se 'LoginWindow' zav≈ôe
        - 'WorkOrderWindow' uchov√°v√° referenci na 'ControllerApp'
        """
        from controllers.work_order_controller import WorkOrderController
        self.work_order_controller = WorkOrderController(self.window_stack)
        self.window_stack.push(self.work_order_controller.work_order_window)

    def handle_exit(self):
        """Zav≈ôe LoginWindow a vr√°t√≠ se na p≈ôedchoz√≠ okno ve stacku."""
        self.login_window.effects.fade_out(self.login_window, duration=3000)  # ‚úÖ To spust√≠ signal destroyed ‚Üí stack manager udƒõl√° sv√©
