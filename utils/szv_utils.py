import hashlib
import configparser
from core.logger import Logger
from pathlib import Path
from core.messenger import Messenger

# üìå Glob√°ln√≠ promƒõnn√° uchov√°vaj√≠c√≠ prefix hodnoty
value_prefix = None


def get_value_prefix():
    """
    Vr√°t√≠ hodnotu 'value_prefix' bez pou≈æit√≠ 'global'.
    :return: Aktu√°ln√≠ hodnota 'value_prefix'
    """
    return value_prefix


class SzvDecrypt:
    """
    T≈ô√≠da pro dek√≥dov√°n√≠ souboru a ovƒõ≈ôen√≠ p≈ôihl√°≈°en√≠ pomoc√≠ SHA-256 hashe.
    - ƒåte zak√≥dovan√Ω soubor obsahuj√≠c√≠ p≈ôihla≈°ovac√≠ √∫daje
    - Dek√≥duje obsah souboru pomoc√≠ XOR operace
    - Ovƒõ≈ôuje u≈æivatelsk√© heslo proti ulo≈æen√Ωm hodnot√°m
    """

    def __init__(self, config_file: Path = Path(__file__).parent.parent / 'setup' / 'config.ini'):
        """
        Inicializuje t≈ô√≠du SzvDecrypt a nastav√≠ cestu k vstupn√≠mu souboru a loggeru.
        :param config_file: Cesta ke konfiguraƒçn√≠mu souboru ('config.ini').
        """
        # üìå Inicializace logger≈Ø
        self.normal_logger = Logger(spaced=False)  # ‚úÖ Klasick√Ω logger
        self.spaced_logger = Logger(spaced=True)  # ‚úÖ Logger s pr√°zdn√Ωm ≈ô√°dkem

        # üìå Inicializace messengeru
        self.messenger = Messenger()  # ‚úÖ Inicializujeme instanci 'Messenger' pro spr√°vu zpr√°v

        config = configparser.ConfigParser()
        config.optionxform = str  # ‚úÖ Zajist√≠ zachov√°n√≠ velikosti p√≠smen
        config.read(config_file)

        if not config.sections():
            self.spaced_logger.log('Error', f'Config file nebyl nalezen: {config_file}', 'MOD001')
            self.messenger.show_error('Error', f'Config file nebyl nalezen: {config_file}', 'MOD001', True)

        self.szv_input_file = config.get('Paths', 'szv_input_file', fallback='T:/Prikazy/DataTPV/SZV.dat')

        # üìå Uchov√°v√°n√≠ dek√≥dovan√Ωch hodnot
        self.value_surname = None
        self.value_name = None
        self.value_prefix = None

    def log_decoded_file(self):
        """
        Zaloguje dek√≥dovan√Ω obsah vstupn√≠ho souboru, pokud existuje.
        """
        try:
            with Path(self.szv_input_file).open('r') as infile:
                for line in infile:
                    byte_array = bytearray.fromhex(line.strip())
                    decoded_line = self.decoding_line(byte_array)
                    self.normal_logger.clear_log('Info', f'Dek√≥dovan√Ω ≈ô√°dek: {decoded_line}')
        except Exception as e:
            self.normal_logger.log('Error', f'P≈ôi ƒçten√≠ souboru do≈°lo k chybƒõ: {str(e)}', 'MOD002')

    @staticmethod
    def decoding_line(encoded_data):
        """
        Dek√≥duje dan√° zak√≥dovan√° data XOR operac√≠.
        :param encoded_data: Zak√≥dovan√° data jako 'bytearray'.
        :return: Dek√≥dovan√° data jako seznam string≈Ø.
        """
        int_xor = len(encoded_data) % 32
        decoded_data = bytearray(len(encoded_data))

        for i in range(len(encoded_data)):
            decoded_data[i] = encoded_data[i] ^ (int_xor ^ 0x6)
            int_xor = (int_xor + 5) % 32

        return decoded_data.decode('windows-1250').split('\x15')

    def check_login(self, password):
        """
        Zkontroluje, zda zadan√© heslo odpov√≠d√° nƒõkter√©mu dek√≥dovan√©mu ≈ô√°dku ve vstupn√≠m souboru.
        :param password: Heslo k ovƒõ≈ôen√≠.
        :return: 'True', pokud heslo odpov√≠d√°, jinak 'False'.
        """
        global value_prefix  # ‚úÖ Umo≈æ≈àuje upravit glob√°ln√≠ promƒõnnou
        try:
            decoded_data = self.decoding_file()
            hashed_password = hashlib.sha256(password.encode()).hexdigest()
            for decoded_line in decoded_data:
                if hashed_password == decoded_line[0]:
                    if len(decoded_line) > 1:
                        parts = decoded_line[1].split(',')
                        if len(parts) >= 4:
                            self.value_surname = parts[2].strip()
                            self.value_name = parts[3].strip()
                            self.value_prefix = parts[4].strip()
                            global value_prefix
                            value_prefix = self.value_prefix  # ‚úÖ Aktualizace glob√°ln√≠ promƒõnn√©
                            self.spaced_logger.clear_log('Info', f'Logged: {self.value_surname} {self.value_name} {self.value_prefix}')
                            return True
                        else:
                            self.normal_logger.log('Warning', f'≈ò√°dek neobsahuje dostatek ƒç√°st√≠: {decoded_line[1]}', 'MOD003')
                            return False
                    else:
                        self.normal_logger.log('Warning', f'≈ò√°dek neobsahuje dal≈°√≠ ƒç√°sti: {decoded_line}', 'MOD004')
                        return False

            self.spaced_logger.log('Warning', f'Zadan√© heslo ({password}) nebylo nalezeno v souboru ({self.szv_input_file}).', 'MOD005')

            return False

        except Exception as e:
            self.normal_logger.log('Error', f'Neoƒçek√°van√° chyba p≈ôi ovƒõ≈ôov√°n√≠ hesla: {str(e)}', 'MOD006')
            self.messenger.show_error('Error', f'{str(e)}', 'MOD006', True)
            return False

    def decoding_file(self):
        """
        Naƒçte a dek√≥duje obsah vstupn√≠ho souboru.
        :return: Seznam dek√≥dovan√Ωch ≈ô√°dk≈Ø, kde ka≈æd√Ω ≈ô√°dek je seznam obsahuj√≠c√≠ hash hesla a dek√≥dovan√° data.
        """
        decoded_lines = []
        try:
            with Path(self.szv_input_file).open('r') as infile:
                for line in infile:
                    byte_array = bytearray.fromhex(line.strip())
                    decoded_line = self.decoding_line(byte_array)
                    decoded_lines.append([hashlib.sha256(decoded_line[0].encode()).hexdigest(), ','.join(decoded_line)])
        except Exception as e:
            self.normal_logger.log('Error', f'P≈ôi ƒçten√≠ souboru do≈°lo k chybƒõ: {str(e)}', 'MOD007')
            self.messenger.show_error('Error', f'{str(e)}', 'MOD007', True)
            return False
        finally:
            if 'infile' in locals():
                infile.close()  # ‚úÖ Zajist√≠ uzav≈ôen√≠ souboru

        return decoded_lines
