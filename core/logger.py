import logging
import configparser
from pathlib import Path


class Logger:
    """
    T≈ô√≠da pro spr√°vu logov√°n√≠ aplikace.
    Podporuje dvƒõ metody logov√°n√≠:
    'log_with_code()' ‚Äì zapisuje zpr√°vu s 'error_code'
    'log_no_code()' ‚Äì zapisuje zpr√°vu bez 'error_code'
    """

    class IconFormatter(logging.Formatter):
        """P≈ôizp≈Øsoben√Ω formatter pro p≈ôid√°n√≠ ikon k √∫rovn√≠m log≈Ø."""
        ICONS = {
            'INFO': '‚ÑπÔ∏è INFO   ',
            'WARNING': '‚ö†Ô∏è WARNING',
            'ERROR': '‚ùå ERROR  '  # ‚úÖ Extra mezera pro zarovn√°n√≠!
        }

        def format(self, record):
            max_width = 12  # ‚úÖ Maxim√°ln√≠ ≈°√≠≈ôka √∫rovn√≠ logu (pro zarovn√°n√≠)
            record.levelname = self.ICONS.get(record.levelname, record.levelname)  # ‚úÖ P≈ôid√°n√≠ ikonky
            return super().format(record)

    def __init__(self, config_file='config.ini', spaced=False):
        """
        Inicializuje 'Logger' a nastav√≠ parametry pro logov√°n√≠.

        :param config_file: Cesta ke konfiguraƒçn√≠mu souboru ('config.ini')
        :param spaced: Urƒçuje, zda se p≈ôed logem p≈ôid√° pr√°zdn√Ω ≈ô√°dek ('True'/'False')
        """
        self.spaced = spaced  # ‚úÖ Urƒçuje, zda p≈ôid√°me pr√°zdn√Ω ≈ô√°dek p≈ôed logem

        # üìå Naƒçten√≠ konfigurace
        config = configparser.ConfigParser()
        config.optionxform = str  # ‚úÖ Zajist√≠ zachov√°n√≠ velikosti p√≠smen
        config.read(config_file)

        # üìå Naƒçten√≠ cesty k log souboru (p≈ôevod relativn√≠ cesty na absolutn√≠)
        self.log_file_path = Path(config.get('Paths', 'log_file_path')).resolve()

        # üìå Vytvo≈ôen√≠ adres√°≈ôe pro log soubor, pokud neexistuje
        self.log_path = self.log_file_path.parent
        self.log_path.mkdir(parents=True, exist_ok=True)

        # üìå Nastaven√≠ z√°kladn√≠ konfigurace logov√°n√≠
        logging.basicConfig(
            filename=self.log_file_path,
            level=logging.INFO,  # ‚úÖ Nastaven√≠ √∫rovnƒõ logov√°n√≠
            encoding='utf-8',
            format='%(asctime)s - %(levelname)s >>> %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )

        # üìå Odstranƒõn√≠ v√Ωpisu do konzole (pouze souborov√Ω log)
        for handler in logging.getLogger().handlers:
            logging.getLogger().removeHandler(handler)

        # üìå Aplikace vlastn√≠ho formatteru na souborov√Ω log
        file_handler = logging.FileHandler(self.log_file_path, encoding='utf-8')
        file_handler.setFormatter(self.IconFormatter('%(asctime)s - %(levelname)s >>> %(message)s'))
        logging.getLogger().addHandler(file_handler)

    def log(self, level, message, error_code='GENERIC'):
        """
        Zapisuje log zpr√°vu do souboru podle zvolen√© √∫rovnƒõ ('Info', 'Warning', 'Error').

        - Pokud je 'spaced=True', p≈ôid√° se p≈ôed logem pr√°zdn√Ω ≈ô√°dek
        - Podporuje √∫rovnƒõ logov√°n√≠: 'Info', 'Warning', 'Error'
        - Ka≈æd√Ω log obsahuje unik√°tn√≠ ID chyby

        :param level: √örove≈à logov√°n√≠ ('Info', 'Warning', 'Error')
        :param message: Textov√° zpr√°va k z√°pisu do logu
        :param error_code: Unik√°tn√≠ ID chyby ('DB1001', 'NET2002', 'AUTH3003' apod.)
        """
        if self.spaced:
            with Path(self.log_file_path).open('a') as f:
                f.write('\n')  # ‚úÖ P≈ôid√°n√≠ pr√°zdn√©ho ≈ô√°dku pokud je 'spaced=True'

        log_message = f'{message.ljust(50)} (ID: {error_code})'

        if level == 'Info':
            logging.info(log_message)
        elif level == 'Warning':
            logging.warning(log_message)
        elif level == 'Error':
            logging.error(log_message)

    def clear_log(self, level, message):

        if self.spaced:
            with Path(self.log_file_path).open('a') as f:
                f.write('\n')  # ‚úÖ P≈ôid√°n√≠ pr√°zdn√©ho ≈ô√°dku pokud je 'spaced=True'

        log_message = message.ljust(50)

        if level == 'Info':
            logging.info(log_message)
        elif level == 'Warning':
            logging.warning(log_message)
        elif level == 'Error':
            logging.error(log_message)

# # üìå Testov√°n√≠ loggeru - Debug
# if __name__ == '__main__':
#     normal_logger = Logger(spaced=False)  # ‚úÖ Klasick√Ω logger
#     normal_logger.log('Info', f'Aplikace byla spu≈°tƒõna.', 'NET2002')
#     normal_logger.log('Warning', f'Aplikace byla opƒõt spu≈°tƒõna.', 'NET2005')
#     normal_logger.log('Error', f'Aplikace byla opƒõt spu≈°tƒõna.', 'ERR2007')
#
#     spaced_logger = Logger(spaced=True)  # ‚úÖ Logger s pr√°zdn√Ωm ≈ô√°dkem
#     spaced_logger.log('Info', f'Toto je log s mezerou.')
#     spaced_logger.log('Error', f'Chyba: Nƒõco se pokazilo!', 'AUTH3003')
